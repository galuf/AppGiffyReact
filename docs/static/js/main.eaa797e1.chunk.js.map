{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","services/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","value","type","onChange","target","GridGifItem","id","title","url","className","src","alt","ApiKey","getGifs","a","busqueda","fetch","respuesta","json","data","gifs","map","img","images","downsized_medium","useFetchGifs","category","loading","state","setState","useEffect","then","GifGrid","GifExpertApp","categories","categoria","ReactDOM","render","document","getElementById"],"mappings":"2LA8BeA,EA3BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAgBzC,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAYP,GAAZ,mBAA2BO,OACzCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOD,MAAOP,EAAYS,SAfhB,SAACN,GACzBF,EAAcE,EAAEO,OAAOH,a,QCIZI,EAXK,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAChC,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,8BACE,4BAAIA,U,uBCLNK,EAAS,mCAkBAC,EAhBF,uCAAG,kDAAAC,EAAA,6DAAOC,EAAP,+BAAkB,SAC1BP,EADQ,uDAC8CI,EAD9C,cAC0DG,EAD1D,sBAEUC,MAAMR,GAFhB,cAERS,EAFQ,gBAGSA,EAAUC,OAHnB,uBAGNC,EAHM,EAGNA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QATxB,kBAaPY,GAbO,4CAAH,qDCmBEK,EAlBM,SAACC,GAAc,IAAD,EACPjC,mBAAS,CACjC0B,KAAM,GACNQ,SAAS,IAHsB,mBAC1BC,EAD0B,KACnBC,EADmB,KAejC,OATAC,qBAAU,WACRjB,EAAQa,GAAUK,MAAK,SAACZ,GAAD,OACrBU,EAAS,CACPV,OACAQ,SAAS,SAGZ,CAACD,IAEGE,GCGMI,EAlBC,SAAC,GAAkB,IAAhBN,EAAe,EAAfA,SAAe,EACED,EAAaC,GAAjCH,EADkB,EACxBJ,KAAcQ,EADU,EACVA,QAEtB,OACE,qCACE,qBAAIlB,UAAU,oCAAd,cAAoDiB,EAApD,OACCC,GACC,mBAAGlB,UAAU,mCAAb,yBAEF,qBAAKA,UAAU,YAAf,SACGc,EAAOF,KAAI,SAACC,GACX,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,aCQxB2B,EAlBM,WAAO,IAAD,EACWxC,mBAAS,CAAC,WADrB,mBAClByC,EADkB,KACN1C,EADM,KAGzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG0C,EAAWb,KAAI,SAACc,GAAD,OACd,cAAC,EAAD,CAAyBT,SAAUS,GAArBA,Y,MCRxBC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.eaa797e1.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((value) => [inputValue, ...value]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","const GridGifItem = ({ id, title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <div>\n        <p>{title}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default GridGifItem;\n","const ApiKey = \"wwAFAC9GwkVhHlgHumtmrG2T4tqSQ5Qv\";\n\nconst getGifs = async (busqueda = \"pandas\") => {\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=${ApiKey}&q=${busqueda}&limit=10`;\n  const respuesta = await fetch(url);\n  const { data } = await respuesta.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n\nexport default getGifs;\n","import { useState, useEffect } from \"react\";\nimport getGifs from \"../services/getGifs\";\n\nconst useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((data) =>\n      setState({\n        data,\n        loading: false,\n      })\n    );\n  }, [category]);\n\n  return state;\n};\n\nexport default useFetchGifs;\n","import GridGifItem from \"./GifGridItem\";\nimport useFetchGifs from \"../hooks/useFetchGifs\";\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\n      {loading && (\n        <p className=\"animate__animated animate__flash\">Cargando...</p>\n      )}\n      <div className=\"card-grid\">\n        {images.map((img) => {\n          return <GridGifItem key={img.id} {...img} />;\n        })}\n      </div>\n    </>\n  );\n};\n\nexport default GifGrid;\n","import { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"Pandas\"]);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map((categoria) => (\n          <GifGrid key={categoria} category={categoria} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport GifExpertApp from \"./GifExpertApp\";\n\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}